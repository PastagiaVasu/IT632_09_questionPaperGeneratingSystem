{"ast":null,"code":"// `Math.scale` method implementation\n// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  var nx = +x;\n  var nInLow = +inLow;\n  var nInHigh = +inHigh;\n  var nOutLow = +outLow;\n  var nOutHigh = +outHigh; // eslint-disable-next-line no-self-compare -- NaN check\n\n  if (nx != nx || nInLow != nInLow || nInHigh != nInHigh || nOutLow != nOutLow || nOutHigh != nOutHigh) return NaN;\n  if (nx === Infinity || nx === -Infinity) return nx;\n  return (nx - nInLow) * (nOutHigh - nOutLow) / (nInHigh - nInLow) + nOutLow;\n};","map":{"version":3,"sources":["F:/DAIICT/SEM-2/Software Engerring/Project/frontend/Admin-pannel/node_modules/core-js/internals/math-scale.js"],"names":["module","exports","Math","scale","x","inLow","inHigh","outLow","outHigh","nx","nInLow","nInHigh","nOutLow","nOutHigh","NaN","Infinity"],"mappings":"AAAA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiBC,IAAI,CAACC,KAAL,IAAc,SAASA,KAAT,CAAeC,CAAf,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAiCC,MAAjC,EAAyCC,OAAzC,EAAkD;AAC/E,MAAIC,EAAE,GAAG,CAACL,CAAV;AACA,MAAIM,MAAM,GAAG,CAACL,KAAd;AACA,MAAIM,OAAO,GAAG,CAACL,MAAf;AACA,MAAIM,OAAO,GAAG,CAACL,MAAf;AACA,MAAIM,QAAQ,GAAG,CAACL,OAAhB,CAL+E,CAM/E;;AACA,MAAIC,EAAE,IAAIA,EAAN,IAAYC,MAAM,IAAIA,MAAtB,IAAgCC,OAAO,IAAIA,OAA3C,IAAsDC,OAAO,IAAIA,OAAjE,IAA4EC,QAAQ,IAAIA,QAA5F,EAAsG,OAAOC,GAAP;AACtG,MAAIL,EAAE,KAAKM,QAAP,IAAmBN,EAAE,KAAK,CAACM,QAA/B,EAAyC,OAAON,EAAP;AACzC,SAAO,CAACA,EAAE,GAAGC,MAAN,KAAiBG,QAAQ,GAAGD,OAA5B,KAAwCD,OAAO,GAAGD,MAAlD,IAA4DE,OAAnE;AACD,CAVD","sourcesContent":["// `Math.scale` method implementation\n// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  var nx = +x;\n  var nInLow = +inLow;\n  var nInHigh = +inHigh;\n  var nOutLow = +outLow;\n  var nOutHigh = +outHigh;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  if (nx != nx || nInLow != nInLow || nInHigh != nInHigh || nOutLow != nOutLow || nOutHigh != nOutHigh) return NaN;\n  if (nx === Infinity || nx === -Infinity) return nx;\n  return (nx - nInLow) * (nOutHigh - nOutLow) / (nInHigh - nInLow) + nOutLow;\n};\n"]},"metadata":{},"sourceType":"script"}