{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\n\nvar perform = require('../internals/perform'); // `Promise.try` method\n// https://github.com/tc39/proposal-promise-try\n\n\n$({\n  target: 'Promise',\n  stat: true,\n  forced: true\n}, {\n  'try': function (callbackfn) {\n    var promiseCapability = newPromiseCapabilityModule.f(this);\n    var result = perform(callbackfn);\n    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);\n    return promiseCapability.promise;\n  }\n});","map":{"version":3,"sources":["F:/DAIICT/SEM-2/Software Engerring/Project/frontend/Admin-pannel/node_modules/core-js/modules/esnext.promise.try.js"],"names":["$","require","newPromiseCapabilityModule","perform","target","stat","forced","callbackfn","promiseCapability","f","result","error","reject","resolve","value","promise"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,0BAA0B,GAAGD,OAAO,CAAC,qCAAD,CAAxC;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,sBAAD,CAArB,C,CAEA;AACA;;;AACAD,CAAC,CAAC;AAAEI,EAAAA,MAAM,EAAE,SAAV;AAAqBC,EAAAA,IAAI,EAAE,IAA3B;AAAiCC,EAAAA,MAAM,EAAE;AAAzC,CAAD,EAAkD;AACjD,SAAO,UAAUC,UAAV,EAAsB;AAC3B,QAAIC,iBAAiB,GAAGN,0BAA0B,CAACO,CAA3B,CAA6B,IAA7B,CAAxB;AACA,QAAIC,MAAM,GAAGP,OAAO,CAACI,UAAD,CAApB;AACA,KAACG,MAAM,CAACC,KAAP,GAAeH,iBAAiB,CAACI,MAAjC,GAA0CJ,iBAAiB,CAACK,OAA7D,EAAsEH,MAAM,CAACI,KAA7E;AACA,WAAON,iBAAiB,CAACO,OAAzB;AACD;AANgD,CAAlD,CAAD","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar newPromiseCapabilityModule = require('../internals/new-promise-capability');\nvar perform = require('../internals/perform');\n\n// `Promise.try` method\n// https://github.com/tc39/proposal-promise-try\n$({ target: 'Promise', stat: true, forced: true }, {\n  'try': function (callbackfn) {\n    var promiseCapability = newPromiseCapabilityModule.f(this);\n    var result = perform(callbackfn);\n    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);\n    return promiseCapability.promise;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}