{"ast":null,"code":"'use strict';\n\nvar getBuiltIn = require('../internals/get-built-in');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar aCallable = require('../internals/a-callable');\n\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar toObject = require('../internals/to-object');\n\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar Map = getBuiltIn('Map');\nvar MapPrototype = Map.prototype;\nvar mapForEach = uncurryThis(MapPrototype.forEach);\nvar mapHas = uncurryThis(MapPrototype.has);\nvar mapSet = uncurryThis(MapPrototype.set);\nvar push = uncurryThis([].push); // `Array.prototype.uniqueBy` method\n// https://github.com/tc39/proposal-array-unique\n\nmodule.exports = function uniqueBy(resolver) {\n  var that = toObject(this);\n  var length = lengthOfArrayLike(that);\n  var result = arraySpeciesCreate(that, 0);\n  var map = new Map();\n  var resolverFunction = resolver != null ? aCallable(resolver) : function (value) {\n    return value;\n  };\n  var index, item, key;\n\n  for (index = 0; index < length; index++) {\n    item = that[index];\n    key = resolverFunction(item);\n    if (!mapHas(map, key)) mapSet(map, key, item);\n  }\n\n  mapForEach(map, function (value) {\n    push(result, value);\n  });\n  return result;\n};","map":{"version":3,"sources":["F:/DAIICT/SEM-2/Software Engerring/Project/frontend/Admin-pannel/node_modules/core-js/internals/array-unique-by.js"],"names":["getBuiltIn","require","uncurryThis","aCallable","lengthOfArrayLike","toObject","arraySpeciesCreate","Map","MapPrototype","prototype","mapForEach","forEach","mapHas","has","mapSet","set","push","module","exports","uniqueBy","resolver","that","length","result","map","resolverFunction","value","index","item","key"],"mappings":"AAAA;;AACA,IAAIA,UAAU,GAAGC,OAAO,CAAC,2BAAD,CAAxB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,oCAAD,CAAzB;;AACA,IAAIE,SAAS,GAAGF,OAAO,CAAC,yBAAD,CAAvB;;AACA,IAAIG,iBAAiB,GAAGH,OAAO,CAAC,mCAAD,CAA/B;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIK,kBAAkB,GAAGL,OAAO,CAAC,mCAAD,CAAhC;;AAEA,IAAIM,GAAG,GAAGP,UAAU,CAAC,KAAD,CAApB;AACA,IAAIQ,YAAY,GAAGD,GAAG,CAACE,SAAvB;AACA,IAAIC,UAAU,GAAGR,WAAW,CAACM,YAAY,CAACG,OAAd,CAA5B;AACA,IAAIC,MAAM,GAAGV,WAAW,CAACM,YAAY,CAACK,GAAd,CAAxB;AACA,IAAIC,MAAM,GAAGZ,WAAW,CAACM,YAAY,CAACO,GAAd,CAAxB;AACA,IAAIC,IAAI,GAAGd,WAAW,CAAC,GAAGc,IAAJ,CAAtB,C,CAEA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC3C,MAAIC,IAAI,GAAGhB,QAAQ,CAAC,IAAD,CAAnB;AACA,MAAIiB,MAAM,GAAGlB,iBAAiB,CAACiB,IAAD,CAA9B;AACA,MAAIE,MAAM,GAAGjB,kBAAkB,CAACe,IAAD,EAAO,CAAP,CAA/B;AACA,MAAIG,GAAG,GAAG,IAAIjB,GAAJ,EAAV;AACA,MAAIkB,gBAAgB,GAAGL,QAAQ,IAAI,IAAZ,GAAmBjB,SAAS,CAACiB,QAAD,CAA5B,GAAyC,UAAUM,KAAV,EAAiB;AAC/E,WAAOA,KAAP;AACD,GAFD;AAGA,MAAIC,KAAJ,EAAWC,IAAX,EAAiBC,GAAjB;;AACA,OAAKF,KAAK,GAAG,CAAb,EAAgBA,KAAK,GAAGL,MAAxB,EAAgCK,KAAK,EAArC,EAAyC;AACvCC,IAAAA,IAAI,GAAGP,IAAI,CAACM,KAAD,CAAX;AACAE,IAAAA,GAAG,GAAGJ,gBAAgB,CAACG,IAAD,CAAtB;AACA,QAAI,CAAChB,MAAM,CAACY,GAAD,EAAMK,GAAN,CAAX,EAAuBf,MAAM,CAACU,GAAD,EAAMK,GAAN,EAAWD,IAAX,CAAN;AACxB;;AACDlB,EAAAA,UAAU,CAACc,GAAD,EAAM,UAAUE,KAAV,EAAiB;AAC/BV,IAAAA,IAAI,CAACO,MAAD,EAASG,KAAT,CAAJ;AACD,GAFS,CAAV;AAGA,SAAOH,MAAP;AACD,CAlBD","sourcesContent":["'use strict';\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toObject = require('../internals/to-object');\nvar arraySpeciesCreate = require('../internals/array-species-create');\n\nvar Map = getBuiltIn('Map');\nvar MapPrototype = Map.prototype;\nvar mapForEach = uncurryThis(MapPrototype.forEach);\nvar mapHas = uncurryThis(MapPrototype.has);\nvar mapSet = uncurryThis(MapPrototype.set);\nvar push = uncurryThis([].push);\n\n// `Array.prototype.uniqueBy` method\n// https://github.com/tc39/proposal-array-unique\nmodule.exports = function uniqueBy(resolver) {\n  var that = toObject(this);\n  var length = lengthOfArrayLike(that);\n  var result = arraySpeciesCreate(that, 0);\n  var map = new Map();\n  var resolverFunction = resolver != null ? aCallable(resolver) : function (value) {\n    return value;\n  };\n  var index, item, key;\n  for (index = 0; index < length; index++) {\n    item = that[index];\n    key = resolverFunction(item);\n    if (!mapHas(map, key)) mapSet(map, key, item);\n  }\n  mapForEach(map, function (value) {\n    push(result, value);\n  });\n  return result;\n};\n"]},"metadata":{},"sourceType":"script"}