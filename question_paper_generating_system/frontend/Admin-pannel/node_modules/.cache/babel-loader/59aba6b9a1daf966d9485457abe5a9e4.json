{"ast":null,"code":"var isCallable = require('../internals/is-callable');\n\nvar isObject = require('../internals/is-object');\n\nvar setPrototypeOf = require('../internals/object-set-prototype-of'); // makes subclassing work correct for wrapped built-ins\n\n\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if ( // it can work only with native `setPrototypeOf`\n  setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n  isCallable(NewTarget = dummy.constructor) && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};","map":{"version":3,"sources":["F:/DAIICT/SEM-2/Software Engerring/Project/frontend/Admin-pannel/node_modules/core-js/internals/inherit-if-required.js"],"names":["isCallable","require","isObject","setPrototypeOf","module","exports","$this","dummy","Wrapper","NewTarget","NewTargetPrototype","constructor","prototype"],"mappings":"AAAA,IAAIA,UAAU,GAAGC,OAAO,CAAC,0BAAD,CAAxB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,wBAAD,CAAtB;;AACA,IAAIE,cAAc,GAAGF,OAAO,CAAC,sCAAD,CAA5B,C,CAEA;;;AACAG,MAAM,CAACC,OAAP,GAAiB,UAAUC,KAAV,EAAiBC,KAAjB,EAAwBC,OAAxB,EAAiC;AAChD,MAAIC,SAAJ,EAAeC,kBAAf;AACA,OACE;AACAP,EAAAA,cAAc,IACd;AACAH,EAAAA,UAAU,CAACS,SAAS,GAAGF,KAAK,CAACI,WAAnB,CAFV,IAGAF,SAAS,KAAKD,OAHd,IAIAN,QAAQ,CAACQ,kBAAkB,GAAGD,SAAS,CAACG,SAAhC,CAJR,IAKAF,kBAAkB,KAAKF,OAAO,CAACI,SAPjC,EAQET,cAAc,CAACG,KAAD,EAAQI,kBAAR,CAAd;AACF,SAAOJ,KAAP;AACD,CAZD","sourcesContent":["var isCallable = require('../internals/is-callable');\nvar isObject = require('../internals/is-object');\nvar setPrototypeOf = require('../internals/object-set-prototype-of');\n\n// makes subclassing work correct for wrapped built-ins\nmodule.exports = function ($this, dummy, Wrapper) {\n  var NewTarget, NewTargetPrototype;\n  if (\n    // it can work only with native `setPrototypeOf`\n    setPrototypeOf &&\n    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n    isCallable(NewTarget = dummy.constructor) &&\n    NewTarget !== Wrapper &&\n    isObject(NewTargetPrototype = NewTarget.prototype) &&\n    NewTargetPrototype !== Wrapper.prototype\n  ) setPrototypeOf($this, NewTargetPrototype);\n  return $this;\n};\n"]},"metadata":{},"sourceType":"script"}