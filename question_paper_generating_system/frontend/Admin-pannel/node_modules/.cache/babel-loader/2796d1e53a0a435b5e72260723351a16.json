{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\n\nvar global = require('../internals/global');\n\nvar uncurryThis = require('../internals/function-uncurry-this');\n\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\n\nvar parseInt = require('../internals/number-parse-int');\n\nvar INVALID_NUMBER_REPRESENTATION = 'Invalid number representation';\nvar INVALID_RADIX = 'Invalid radix';\nvar RangeError = global.RangeError;\nvar SyntaxError = global.SyntaxError;\nvar TypeError = global.TypeError;\nvar valid = /^[\\da-z]+$/;\nvar charAt = uncurryThis(''.charAt);\nvar exec = uncurryThis(valid.exec);\nvar numberToString = uncurryThis(1.0.toString);\nvar stringSlice = uncurryThis(''.slice); // `Number.fromString` method\n// https://github.com/tc39/proposal-number-fromstring\n\n$({\n  target: 'Number',\n  stat: true,\n  forced: true\n}, {\n  fromString: function fromString(string, radix) {\n    var sign = 1;\n    var R, mathNum;\n    if (typeof string != 'string') throw TypeError(INVALID_NUMBER_REPRESENTATION);\n    if (!string.length) throw SyntaxError(INVALID_NUMBER_REPRESENTATION);\n\n    if (charAt(string, 0) == '-') {\n      sign = -1;\n      string = stringSlice(string, 1);\n      if (!string.length) throw SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    }\n\n    R = radix === undefined ? 10 : toIntegerOrInfinity(radix);\n    if (R < 2 || R > 36) throw RangeError(INVALID_RADIX);\n\n    if (!exec(valid, string) || numberToString(mathNum = parseInt(string, R), R) !== string) {\n      throw SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    }\n\n    return sign * mathNum;\n  }\n});","map":{"version":3,"sources":["F:/DAIICT/SEM-2/Software Engerring/Project/frontend/Admin-pannel/node_modules/core-js/modules/esnext.number.from-string.js"],"names":["$","require","global","uncurryThis","toIntegerOrInfinity","parseInt","INVALID_NUMBER_REPRESENTATION","INVALID_RADIX","RangeError","SyntaxError","TypeError","valid","charAt","exec","numberToString","toString","stringSlice","slice","target","stat","forced","fromString","string","radix","sign","R","mathNum","length","undefined"],"mappings":"AAAA;;AACA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAD,CAAf;;AACA,IAAIC,MAAM,GAAGD,OAAO,CAAC,qBAAD,CAApB;;AACA,IAAIE,WAAW,GAAGF,OAAO,CAAC,oCAAD,CAAzB;;AACA,IAAIG,mBAAmB,GAAGH,OAAO,CAAC,qCAAD,CAAjC;;AACA,IAAII,QAAQ,GAAGJ,OAAO,CAAC,+BAAD,CAAtB;;AAEA,IAAIK,6BAA6B,GAAG,+BAApC;AACA,IAAIC,aAAa,GAAG,eAApB;AACA,IAAIC,UAAU,GAAGN,MAAM,CAACM,UAAxB;AACA,IAAIC,WAAW,GAAGP,MAAM,CAACO,WAAzB;AACA,IAAIC,SAAS,GAAGR,MAAM,CAACQ,SAAvB;AACA,IAAIC,KAAK,GAAG,YAAZ;AACA,IAAIC,MAAM,GAAGT,WAAW,CAAC,GAAGS,MAAJ,CAAxB;AACA,IAAIC,IAAI,GAAGV,WAAW,CAACQ,KAAK,CAACE,IAAP,CAAtB;AACA,IAAIC,cAAc,GAAGX,WAAW,CAAC,IAAIY,QAAL,CAAhC;AACA,IAAIC,WAAW,GAAGb,WAAW,CAAC,GAAGc,KAAJ,CAA7B,C,CAEA;AACA;;AACAjB,CAAC,CAAC;AAAEkB,EAAAA,MAAM,EAAE,QAAV;AAAoBC,EAAAA,IAAI,EAAE,IAA1B;AAAgCC,EAAAA,MAAM,EAAE;AAAxC,CAAD,EAAiD;AAChDC,EAAAA,UAAU,EAAE,SAASA,UAAT,CAAoBC,MAApB,EAA4BC,KAA5B,EAAmC;AAC7C,QAAIC,IAAI,GAAG,CAAX;AACA,QAAIC,CAAJ,EAAOC,OAAP;AACA,QAAI,OAAOJ,MAAP,IAAiB,QAArB,EAA+B,MAAMZ,SAAS,CAACJ,6BAAD,CAAf;AAC/B,QAAI,CAACgB,MAAM,CAACK,MAAZ,EAAoB,MAAMlB,WAAW,CAACH,6BAAD,CAAjB;;AACpB,QAAIM,MAAM,CAACU,MAAD,EAAS,CAAT,CAAN,IAAqB,GAAzB,EAA8B;AAC5BE,MAAAA,IAAI,GAAG,CAAC,CAAR;AACAF,MAAAA,MAAM,GAAGN,WAAW,CAACM,MAAD,EAAS,CAAT,CAApB;AACA,UAAI,CAACA,MAAM,CAACK,MAAZ,EAAoB,MAAMlB,WAAW,CAACH,6BAAD,CAAjB;AACrB;;AACDmB,IAAAA,CAAC,GAAGF,KAAK,KAAKK,SAAV,GAAsB,EAAtB,GAA2BxB,mBAAmB,CAACmB,KAAD,CAAlD;AACA,QAAIE,CAAC,GAAG,CAAJ,IAASA,CAAC,GAAG,EAAjB,EAAqB,MAAMjB,UAAU,CAACD,aAAD,CAAhB;;AACrB,QAAI,CAACM,IAAI,CAACF,KAAD,EAAQW,MAAR,CAAL,IAAwBR,cAAc,CAACY,OAAO,GAAGrB,QAAQ,CAACiB,MAAD,EAASG,CAAT,CAAnB,EAAgCA,CAAhC,CAAd,KAAqDH,MAAjF,EAAyF;AACvF,YAAMb,WAAW,CAACH,6BAAD,CAAjB;AACD;;AACD,WAAOkB,IAAI,GAAGE,OAAd;AACD;AAjB+C,CAAjD,CAAD","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar parseInt = require('../internals/number-parse-int');\n\nvar INVALID_NUMBER_REPRESENTATION = 'Invalid number representation';\nvar INVALID_RADIX = 'Invalid radix';\nvar RangeError = global.RangeError;\nvar SyntaxError = global.SyntaxError;\nvar TypeError = global.TypeError;\nvar valid = /^[\\da-z]+$/;\nvar charAt = uncurryThis(''.charAt);\nvar exec = uncurryThis(valid.exec);\nvar numberToString = uncurryThis(1.0.toString);\nvar stringSlice = uncurryThis(''.slice);\n\n// `Number.fromString` method\n// https://github.com/tc39/proposal-number-fromstring\n$({ target: 'Number', stat: true, forced: true }, {\n  fromString: function fromString(string, radix) {\n    var sign = 1;\n    var R, mathNum;\n    if (typeof string != 'string') throw TypeError(INVALID_NUMBER_REPRESENTATION);\n    if (!string.length) throw SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    if (charAt(string, 0) == '-') {\n      sign = -1;\n      string = stringSlice(string, 1);\n      if (!string.length) throw SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    }\n    R = radix === undefined ? 10 : toIntegerOrInfinity(radix);\n    if (R < 2 || R > 36) throw RangeError(INVALID_RADIX);\n    if (!exec(valid, string) || numberToString(mathNum = parseInt(string, R), R) !== string) {\n      throw SyntaxError(INVALID_NUMBER_REPRESENTATION);\n    }\n    return sign * mathNum;\n  }\n});\n"]},"metadata":{},"sourceType":"script"}